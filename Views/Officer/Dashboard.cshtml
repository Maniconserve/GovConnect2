@model OfficerDashboardViewModel
@using Microsoft.AspNetCore.Mvc;
@using System.Security.Claims;

<head>
    <title>Officer Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Styles for the notifications container */
        #notificationsWrapper {
            position: relative;
            overflow: visible;
            transition: height 0.3s ease-in-out;
        }

        #notificationsContainer {
            display: flex;
            flex-direction: column;
            padding: 0;
        }

        .notification {
            background-color: bg-blue-600;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            transition: background-color 0.3s;
        }

        .no-notifications {
            text-align: center;
            padding: 1rem;
            color: #888;
        }
    </style>
</head>
<body>
    <div class="bg-gray-100 font-sans leading-normal tracking-normal">
        <!-- Main Container -->
        <div class="max-w-7xl mx-auto p-8 min-h-screen flex items-center justify-center">
            <div class="bg-white shadow-xl rounded-lg p-6 w-full">
                <!-- Navbar -->
                <nav class="flex justify-between items-center mb-8">
                    <h1 class="text-2xl font-bold text-blue-600">Officer Dashboard</h1>
                </nav>

                <!-- Alert Message -->
                @if (TempData["EscalateMessage"] != null)
                {
                    <div class="alert alert-success bg-blue-50 border border-blue-200 text-blue-600 p-4 mb-8 rounded-lg">
                        <p>@TempData["EscalateMessage"]</p>
                    </div>
                }

                <!-- Welcome Message -->
                <div class="bg-blue-50 p-6 rounded-lg mb-8">
                    <h2 class="text-2xl font-semibold text-blue-600">Welcome, @Model.OfficerName</h2>
                    <p class="text-gray-600 mt-2">Here's an overview of your assigned tasks and notifications.</p>
                </div>

                <!-- Grievance Overview Section -->
                <div class="mb-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Grievance Overview</h3>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Card 1 -->
                        <div class="bg-gray-100 p-6 rounded-lg shadow-md">
                            <h4 class="text-lg font-semibold text-blue-600">Total Grievances</h4>
                            <p class="text-gray-800 text-2xl font-bold mt-4">@Model.TotalGrievances</p>
                        </div>
                        <!-- Card 2 -->
                        <div class="bg-gray-100 p-6 rounded-lg shadow-md">
                            <h4 class="text-lg font-semibold text-blue-600">Pending Grievances</h4>
                            <p class="text-gray-800 text-2xl font-bold mt-4">@Model.PendingGrievances</p>
                        </div>
                        <!-- Card 3 -->
                        <div class="bg-gray-100 p-6 rounded-lg shadow-md">
                            <h4 class="text-lg font-semibold text-blue-600">Resolved Grievances</h4>
                            <p class="text-gray-800 text-2xl font-bold mt-4">@Model.ResolvedGrievances</p>
                        </div>
                    </div>
                </div>

                <!-- Assigned Grievances Table -->
                <div class="mb-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Assigned Grievances</h3>
                    <div class="overflow-x-auto">
                        <table class="table-auto w-full border-collapse border border-gray-300">
                            <thead class="bg-blue-600 text-white">
                                <tr>
                                    <th class="border border-gray-300 px-4 py-2 text-left">Grievance ID</th>
                                    <th class="border border-gray-300 px-4 py-2 text-left">Title</th>
                                    <th class="border border-gray-300 px-4 py-2 text-left">Status</th>
                                    <th class="border border-gray-300 px-4 py-2 text-left">Posted On</th>
                                    <th class="border border-gray-300 px-4 py-2 text-center">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var grievance in Model.AssignedGrievances)
                                {
                                    <tr class="@(grievance.GrievanceID % 2 == 0 ? "bg-gray-100" : "")">
                                        <td class="border border-gray-300 px-4 py-2">@grievance.GrievanceID</td>
                                        <td class="border border-gray-300 px-4 py-2">@grievance.Title</td>
                                        <td class="border border-gray-300 px-4 py-2">@grievance.Status</td>
                                        <td class="border border-gray-300 px-4 py-2">@grievance.CreatedAt.ToString("MM/dd/yyyy")</td>
                                        <td class="border border-gray-300 px-4 py-2 text-center">
                                            <a asp-action="Details" asp-route-id="@grievance.GrievanceID" class="text-blue-600 hover:underline">View Details</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Notifications</h3>
                    <div id="notificationsWrapper">
                        <div id="notificationsContainer">
                            <!-- If no notifications, show a message -->
                            <div class="no-notifications" id="noNotificationsMessage">No notifications received</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="~/js/signalr.js"></script>
    <script>
    // Create a connection to the SignalR Hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    // Start the connection
    connection.start().then(function () {
        var grievances = @Html.Raw(Json.Serialize(Model.AssignedGrievances));

        // Join the chat for the grievance
        connection.invoke("JoinGroup", grievances)
            .catch(function (err) {
                console.error("Error while joining the chat for grievance: " + grievances, err.toString());
            });
    }).catch(function (err) {
        console.error("Error while starting SignalR connection: ", err.toString());
    });

    connection.on("ReceiveMessage", function (user, name, message, grievanceId) {
        // Hide the "No notifications" message when there are notifications
        const noNotificationsMessage = document.getElementById("noNotificationsMessage");
        noNotificationsMessage.style.display = "none";

        // Create a new notification div
        const notificationDiv = document.createElement("div");
        notificationDiv.classList.add("notification");

        // Add content to the notification
        notificationDiv.innerHTML = `
            <a href="/Officer/Details?id=${grievanceId}" class="text-blue-800 text-lg font-semibold mb-2 hover:underline">
                <strong>${name}</strong>
            </a>
            <span class="text-gray-600 text-base">${message}</span>
        `;

        // Add the click event to remove the notification on click
        notificationDiv.addEventListener("click", function() {
            // Remove the notification from localStorage
            removeNotificationFromLocalStorage(grievanceId);

            // Remove the notification from the DOM
            notificationDiv.remove();

            // Check if there are no more notifications
            const notificationsContainer = document.getElementById("notificationsContainer");
            if (notificationsContainer.children.length === 0) {
                document.getElementById("noNotificationsMessage").style.display = "block";
            }

            // Adjust the height of the notifications container
            document.getElementById("notificationsWrapper").style.height = `${notificationsContainer.scrollHeight}px`;
        });

        // Append the new notification to the container
        const notificationsContainer = document.getElementById("notificationsContainer");
        notificationsContainer.appendChild(notificationDiv);

        // Adjust the height of the notification wrapper based on the content
        document.getElementById("notificationsWrapper").style.height = `${notificationsContainer.scrollHeight}px`;
        var currentUserId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
        // Store the notification in localStorage with currentUserId
        let storedNotifications = JSON.parse(localStorage.getItem("notifications")) || [];
        storedNotifications.push({ user, name, message, grievanceId, userId: currentUserId });
        localStorage.setItem("notifications", JSON.stringify(storedNotifications));
    });

    // Function to load and display notifications from localStorage
    window.onload = function () {
        let storedNotifications = JSON.parse(localStorage.getItem("notifications")) || [];
        storedNotifications = storedNotifications.filter(function(notification) {
            return notification.userId === currentUserId;
        });

        const notificationsContainer = document.getElementById("notificationsContainer");

        // If there are no notifications, show the "No notifications" message
        if (storedNotifications.length === 0) {
            document.getElementById("noNotificationsMessage").style.display = "block"; // Show message
            document.getElementById("notificationsWrapper").style.height = "auto"; // Adjust container height
        } else {
            document.getElementById("noNotificationsMessage").style.display = "none"; // Hide message

            storedNotifications.forEach(function (notification) {
                const notificationDiv = document.createElement("div");
                notificationDiv.classList.add("notification");

                notificationDiv.innerHTML = `
                    <a href="/Grievance/Details?id=${notification.grievanceId}" class="text-blue-800 text-lg font-semibold mb-2 hover:underline">
                        <strong>${notification.name}</strong>
                    </a>
                    <span class="text-gray-600 text-base">${notification.message}</span>
                `;

                // Add the click event to remove the notification on click
                notificationDiv.addEventListener("click", function() {
                    // Remove the notification from localStorage
                    removeNotificationFromLocalStorage(notification.grievanceId);

                    // Remove the notification from the DOM
                    notificationDiv.remove();

                    // Check if there are no more notifications
                    if (notificationsContainer.children.length === 0) {
                        document.getElementById("noNotificationsMessage").style.display = "block";
                    }

                    // Adjust the height of the notifications container
                    document.getElementById("notificationsWrapper").style.height = `${notificationsContainer.scrollHeight}px`;
                });

                // Append the notification to the container
                notificationsContainer.appendChild(notificationDiv);
            });

            // Adjust the height of the notification wrapper based on the content
            document.getElementById("notificationsWrapper").style.height = `${notificationsContainer.scrollHeight}px`;
        }
    };

    // Function to remove a notification from localStorage
    function removeNotificationFromLocalStorage(grievanceId) {
        let storedNotifications = JSON.parse(localStorage.getItem("notifications")) || [];
        storedNotifications = storedNotifications.filter(function(notification) {
            return notification.grievanceId !== grievanceId; // Remove the notification by grievanceId
        });
        localStorage.setItem("notifications", JSON.stringify(storedNotifications));
    }
</script>

</body>
